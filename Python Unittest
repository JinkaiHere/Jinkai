import unittest

def power_num(number: float, power: int) -> float:
    """
    Raise the number to the power if number >= 0.
    """
    # The number can be int or float
    if not isinstance(number, int) and not isinstance(number, float):
        raise TypeError("The number can only be int or float")
    # The power can only be int
    if not isinstance(power, int):
        raise TypeError("The power can only be of int type")
    # If number > 0, we compute the calculation
    if number >= 0:
        return round(number ** power, 2)
    raise TypeError("The number can only be >= 0")

class TestPower(unittest.TestCase):
    """
    Test the function power_num
    """
    def test_power_int(self):
        self.assertEqual(power_num(2, 3), 8)

    def test_power_float(self):
        self.assertEqual(power_num(1.5, 2), 2.25)
    
    def test_for_list_as_number(self):
        with self.assertRaises(TypeError):
            power_num([], 2)

    def test_for_float_as_power(self):
        with self.assertRaises(TypeError):
            power_num(6, 2.2)
    
    def test_for_negative_numbers(self):
        with self.assertRaises(TypeError):
            power_num(-6, 2)
    
    def test_for_zero_as_number_and_positive_power(self):
        self.assertEqual(power_num(0, 2), 0)
    # This gives a failure
    def test_for_zero_as_number_and_zero_power(self):
        self.assertEqual(power_num(0, 0), 0)
    # This gives an error
    def test_for_zero_as_number_and_negative_power(self):
        with self.assertRaises(TypeError):
            power_num(0, -2)


class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

            
class DefaultWidgetSizeTestCase(unittest.TestCase):
    def test_default_widget_size(self):
        widget = Widget('The widget')
        self.assertEqual(widget.size(), (50, 50))


class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def test_default_widget_size(self):
        self.assertEqual(self.widget.size(), (50,50),
                         'incorrect default size')

    def test_widget_resize(self):
        self.widget.resize(100,150)
        self.assertEqual(self.widget.size(), (100,150),
                         'wrong size after resize')

        
class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def tearDown(self):
        self.widget.dispose()
        
if __name__ == '__main__':
    unittest.main()
